/*
 * filegenerator
 * 
 * The following class generates a file called input.txt with the following arguments
 * a. Arrival time
 * b. Volume Duration
 * c. Volume Request Size
 * d. Potential SLA/QoS category of the request
 * 
 * The Arrival time is generated by a Poisson distribution with mean 10
 * The departure time is generated by a Poisson distribution with mean 5
 * The Volume Request size is constant
 * SLA is not used in this version
 * 
 * All rights reserved - Ioannis Papapanagiotou, Pudue University
 */

package simulator;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;


public class LoadGenerator {

	public static int NUMBER_OF_REQUESTS = 5000;
	public static double MEAN_ARRIVAL_TIME = 20;
	public static double MEAN_VOLUME_DURATION = 600;
	
	 public static void main(String[] args) {
         Random rnd = new Random();
         ArrayList<Integer> sizeList = new ArrayList<Integer>();
         ArrayList<Integer> slaList = new ArrayList<Integer>();

	     if(args != null && args.length > 1) {
	         // Parse external args
             try {
                 LoadGenerator.NUMBER_OF_REQUESTS = Integer.parseInt(args[0]);
                 LoadGenerator.MEAN_ARRIVAL_TIME = Integer.parseInt(args[1]);
                 LoadGenerator.MEAN_VOLUME_DURATION = Integer.parseInt(args[2]);
                 String volumeSizeStringList[] = args[3].split(",");
                 String slaStringList[] = args[4].split(",");

                 for(String  volumeSize : volumeSizeStringList) {
                     sizeList.add(Integer.parseInt(volumeSize));
                 }

                 for(String  slaString : slaStringList) {
                     slaList.add(Integer.parseInt(slaString) * Backend.DISK_BLOCK_SIZE); // Convert to throughput
                 }

             } catch (Exception e) {
                 e.printStackTrace();
                 System.exit(-1);
             }

	     } else {
             sizeList.add(100000);
             sizeList.add(500000);
             sizeList.add(1000000);

             // Convert from IOPS to bandwidth
             slaList.add(100 * Backend.DISK_BLOCK_SIZE);
             slaList.add(150 * Backend.DISK_BLOCK_SIZE);
         }

		 try {
	        BufferedWriter out = new BufferedWriter(new FileWriter("input.txt"));
	        int arrivalTime = 0; 
	        int volumeDuration = 0;
	        int volumeSize = 0;  //MB


	        for (int i = 1; i <= NUMBER_OF_REQUESTS; i++) {
	        	arrivalTime += getPoissonRandom(MEAN_ARRIVAL_TIME);
	        	volumeDuration = getPoissonRandom(MEAN_VOLUME_DURATION);
	        	volumeSize = sizeList.get(rnd.nextInt(sizeList.size()));

				int sla = slaList.get(rnd.nextInt(slaList.size()));
	        	out.write(i + " " + arrivalTime + " " + volumeDuration + " " + volumeSize + " " + sla);        	
	            out.newLine();
	            out.flush();
	        }
	        out.close();
	     } catch (IOException e) {
             e.printStackTrace();
             System.exit(-1);
         }
	}
	 
	 private static int getPoissonRandom(double mean) {
		 Random r = new Random();
		 double L = Math.exp(-mean);
		 int k = 0;
		 double p = 1.0;
		 do {
			 p = p * r.nextDouble();
			 k++;
		 } while (p > L);
		 return k - 1;
	 }
}
